Don't try to compare the machine language with the assembly instruction

Just see that theere are null bytes

Using jmp short one causes the target address to consist of maximum 1 byte(2 hexadecimal numbers so there won't be any null bytes)
call doesn't have a short version
So, we need to use a negative number for call to be free of null bytes
We do this by putting call instruction in the jumped code segment(1) and putting the call code segment(2) before the jump segment(1)

For the next instructions, we use smaller versions of the extended registers, as they hold smaller length of bits(causing less chance for null bytes)
The AL, BL, etc. use only 1 byte so there is no chance of null byte if we use them
But, the extended registers will already have a different value(EAX, EBX, etc)
So, we zero out these registers first before using the smaller registers
We use xor(safer than sub) to these registers to zero them

If we use inc or dec, we don't need to use the smaller registers