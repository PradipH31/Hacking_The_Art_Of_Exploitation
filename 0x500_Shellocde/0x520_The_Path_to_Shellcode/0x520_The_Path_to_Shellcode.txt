Shellcode is literally injected into a running program, where it takes over like a biological virus inside a cell
Since a shellcode isn't really an executable program, we don't have the luxury of declaring the layout of data in memory or even using other memory segments
Our instructions must be self-contained and ready to take over control of the processor regardless of its current state
This is commonly referred to as position-independent code

In shellcode, the bytes for the string "Hello, world!" must be mixed together with the bytes for the assembly instructions, since there aren't definable or predictable memory segments
This is fine as long as EIP doesn't try to interpret the string as instructions
However, to access the string as data we need a pointer to it
When the shellcode gets executed, it could be anywhere in memory
The string's absolute memory address needs to be calculated relative to EIP
Since EIP cannot be accessed from assembly instrucitons, however, we need to use some sort of trick