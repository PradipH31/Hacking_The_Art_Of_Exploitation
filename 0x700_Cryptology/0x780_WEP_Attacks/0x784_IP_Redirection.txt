Another way to decrypt encrypted packets is to trick the access point into doing all the work
Usually, wireless access points have some form of Internet connectivity, and if this is the case, an IP redirection attack is possible
First, an encrypted packet is captured, and the destination address is changed to an IP address the attacker controls, without decrypting the packet
Then, the modified packet is sent back to the wireless access point, which will decrypt the packet and send it right to the attacker's IP address

The packet modification is made possible due to the CRC32 checksum being a linear, unkeyed function
This means that the packet can be strategically modified and the checksum will still come out the same

This attack also assumes that the source and destination IP addresses are known
This information is easy enough to figure out, just based on the standard internal network IP addressing schemes
Also, a few cases of keystream reuse due to IV collisions can be used to determine the addresses

Once the destination IP address is known, the value can be XORed with the desired IP address, and this whole thing can be XORed into place in the encrypted packet
The XORing of the destination IP address will cancel out, leaving behind the desired IP address XORed with the keystream
Then, to ensure that the checksum stays the same, the source IP address must be strategically modified

For example, assume the source address is 192.168.2,57 and the destination address is 192.168.2.1
The attacker controls the address 123.45.67.89 and wants to redirect traffic there
These IP addresses exist in the packet in the binary form of high- and low-order 16-bit words
The conversion is fairly simple:
Src IP = 192.168.2.57
      SH = 192 · 256 + 168 = 50344
      SL = 2 · 256 + 57 = 569

Dst IP = 192.168.2.1
      DH = 192 · 256 + 168 = 50344
      DL = 2 · 256 + 1 = 513

New IP = 123.45.67.89
      NH = 123 · 256 + 45 = 31533
      NL = 67 · 256 + 89 = 17241

The checksum will be changed by (N H) + (N L) − (D H) − (D L), so this value must be subtracted from somewhere else in the packet
Since the source address is also known and doesn't matter too much, the low-order 16-bit word of that IP address makes a good target

      S'L = SL − (NH + NL − DH − DL)
      S'L = 569 − (31533 + 17241 − 50344 − 513)
      S'L = 2652

The new source IP address should therefore be 192.168.10.92
The source IP address can be modified in the encrypted packet using the same XORing trick, and then the checksums should match
When the packet is sent to the wireless access point, the packet will be decrypted and sent to 123.45.67.89, where the attacker can retrieve it

If the attacker happens to have the ability to monitor packets to an entire class B network, the source address doens't even need to be modified
Assuming the attacker had control over the entire 123.45.X.X IP range, the low-order 16-bit of the IP address could be strategically chosen not to disturb the checksum
If NL = DH + DL - NH, the checksum won't be changed
Here's an example:

   NL = DH + DL - NH
   NL = 50,334 + 513 - 31533
   N'L = 82390

The new destination IP address should be 123.45.75.124