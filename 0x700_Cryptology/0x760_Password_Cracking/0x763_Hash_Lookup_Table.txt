Another interesting idea for password cracking is using a giant hash lookup table
If all the hashes of all the possible passwords were precomputed and stored in a searchable data structure somewhere, any password could be cracked in the time it takes to search
Assuming a binary search, this time would be about O(log 2 N), where N is the number of entries
Since N is 95^8 in the case of 8-character passwords, this works out to about O(8 log 2 95), which is quite fast

However, a hash lookup table like this would require about 100,000 terabytes of storage
In addition, the design of the password-hashing algorithm takes this type of attack into consideration and mitigates it with the salt value
Since multiple plaintext passwords will hash to different password hashes with different salts, a separate lookup table would have to be created for each salt
With the DES-based crypt() function, there are 4096 possible salt values, which means that even for a smaller keyspace, such as all possible 4-character passwords, a hash lookup table for all possible 4-character passwords is about 1 gigabyte, but because of the salt values, there are 4096 possible hashes for a single plaintext password, necessating 4096 different tables
This raises the needed storage space up to about 4.6 terabytes, which greatly dissuades such an attack