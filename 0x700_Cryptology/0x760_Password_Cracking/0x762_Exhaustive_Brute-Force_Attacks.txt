A dictionary attack that tries every single possible combination is an exhaustive brute-force attack
While this type of attack will technically be able to crack every conceivable password, it will probably take longer than your grandchildren's grandchildren would be willing to wait

With 95 possible input characters for crypt()-style passwords, there are 95^8 possible passwords for an exhaustive search of all 8-character passwords, which works out to be over 7 quadrillion possible characters
This number gets so big so quickly because, as another character is added to the password length, the number of possible passwords grows exponentially
Assuming 10,000 cracks per second, it would take about 22,875 years to try every password
Distributing this effort across many machines and processors is one possible approach; however, it is important to remember that this will only achieve a linear speedup
If 1000 machines were combined, each capable of 10,000 cracks per second, the effort will take over 22 years
The linear speedup achieved by adding another machine is marginal compared to the growth in keyspace when another character is added to the password length

Luckily, the inverse of the exponential growth is also true; as characters are removed from the password length, the number of possible passwords decreases exponentially
This means that a 4-character password only has 95^4 possible passwords
This keyspace has only about 84 million possible passwords, which can be exhaustively cracked (assuming 10,000 cracks per second) in a little over 2 hours
This means that, even though a password like h4R% isn't in any dictionary, it can be cracked in a reasonable amount of time

This means that, in addition to avoiding dictionary words, password length is also important
Since the complexity scales up exponentially, doubling the length to produce an 8-character password should bring the level of effort required to crack the password into the unreasonable time frame

Solar Designer has developed a password-cracking program called John the Ripper that uses first a dictionary attack and then an exhaustively brute-force attack
This program is probably the most popular one of its kind; it is avaialble at http://www.openwall.com/john
It has been included on the LiveCD

__________________________________________________________________________________
reader@hacking:~/booksrc $ john

John the Ripper Version 1.6 Copyright (c) 1996-98 by Solar Designer
                                                                                                                                                                            
Usage: john [OPTIONS] [PASSWORD-FILES]
--single                   "single crack" mode
--wordlist=FILE --stdin    wordlist mode, read words from FILE or stdin
--rules                    enable word mangling rules for wordlist mode
--incremental[=MODE]       "incremental" mode [using section MODE]
--external=MODE            external mode or word filter
--stdout[=LENGTH]          just output candidate passwords [cut at LENGTH]
--restore[=NAME]           restore an interrupted session [called NAME]
--session=NAME             give a new session the NAME
--status[=NAME]            print status of a session [called NAME]
--make-charset=FILE        make a charset, FILE will be overwritten
--show                     show cracked passwords
--test[=TIME]              run tests and benchmarks for TIME seconds each
--users=[-]LOGIN|UID[,..]  [do not] load this (these) user(s) only
--groups=[-]GID[,..]       load users [not] of this (these) group(s) only
--shells=[-]SHELL[,..]     load users with[out] this (these) shell(s) only
--salts=[-]N               load salts with[out] at least N passwords only
--save-memory=LEVEL        enable memory saving, at LEVEL 1..3
--node=MIN[-MAX]/TOTAL     this node's number range out of TOTAL count
--fork=N                   fork N processes
--format=NAME              force hash type NAME: descrypt/bsdicrypt/md5crypt/
                           bcrypt/LM/AFS/tripcode/dummy/crypt

reader@hacking:~/booksrc $ sudo tail -3 /etc/shadow
matrix:$1$zCcRXVsm$GdpHxqC9epMrdQcayUx0//:13763:0:99999:7:::
jose:$1$pRS4.I8m$Zy5of8AtD800SeMgm.2Yg.:13786:0:99999:7:::
reader:U6aMy0wojraho:13764:0:99999:7:::

reader@hacking:~/booksrc $ sudo john /etc/shadow
Loaded 2 passwords with 2 different salts (FreeBSD MD5 [32/32])
guesses: 0 time: 0:00:00:01 0% (2) c/s: 5522 trying: koko
guesses: 0 time: 0:00:00:03 6% (2) c/s: 5489 trying: exports
guesses: 0 time: 0:00:00:05 10% (2) c/s: 5561 trying: catcat
guesses: 0 time: 0:00:00:09 20% (2) c/s: 5514 trying: dilbert!
guesses: 0 time: 0:00:00:10 22% (2) c/s: 5513 trying: redrum3
testing7 (jose)
guesses: 1 time: 0:00:00:14 44% (2) c/s: 5539 trying: KnightKnight
guesses: 1 time: 0:00:00:17 59% (2) c/s: 5572 trying: Gofish!

__________________________________________________________________________________

In the output, the account jose is shown to have the password of testing7