View details with
info frame

After going to next function, 

(gdb) x/32xw $esp
                              ----------------------------------------------
0xbffff7a0:      0x00000000  |   0x08049744      0xbffff7b8      0x080482d9| 
             -----------------                                             |
0xbffff7b0:  |   0xb7f9f729      0xb7fd6ff4      0xbffff7e8    **0x00000000|
0xbffff7c0:  | **0xb7fd6ff4    **0xbffff880    **0xbffff7e8    **0xb7fd6ff4|  
0xbffff7d0:  |   0xb7ff47b0      0x08048510      0xbffff7e8   (3)0x080484bb| 
             |               -----------------------------------------------
0xbffff7e0:  |(4)0xbffff9b7  |   0x08048510      0xbffff848      0xb7eafebc 
             -----------------
0xbffff7f0:      0x00000002      0xbffff874      0xbffff880      0xb8001898 
0xbffff800:      0x00000000      0x00000001      0x00000001      0x00000000 
0xbffff810:      0xb7fd6ff4      0xb8000ce0      0x00000000      0xbffff848

For the previous stack frame, the ESP is at 0xbffff7e0 as any new stack components will be added to that memory address, not that it is a part of the stack frame
In the next function, the value at address 0xbffff7e0 is the function arguments, value at 0xbffff7dc is the return address(for the EIP)
The value at address 0xbffffd8 is the EBP of the previous stack frame
The value at 0xbffffd4 is the same value as the last component of the stack frame of previous function
After that, all are local variables for the function