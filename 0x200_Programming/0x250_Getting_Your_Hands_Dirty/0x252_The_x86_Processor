The x86 processor has several registers, like internal variables for the processor
Debuggers are used by programmers to step through compiled programs, examine program memory and view processor registers
The GNU development tools also include a debugger called GDB

Using GDB to show the state of processor registers right before the program starts
-------------In the terminal------------
gdb -q ./a.out
Using host libthread_db library "/lib/tls/i686/cmov/libthread_db.so.1".

(gdb) \\\break main\\\

Breakpoint 1 at 0x804837a

(gdb) \\\run\\\

Starting program: /home/reader/booksrc/a.out
Breakpoint 1, 0x0804837a in main ()

(gdb) \\\info registers\\\

eax         0xbffff894      -1073743724 
ecx         0x48e0fe81      1222704769 
edx         0x1      1
ebx         0xb7fd6ff4      -1208127500 
esp         0xbffff800      0xbffff800 
ebp         0xbffff808      0xbffff808 
esi         0xb8000ce0      -1207956256 
edi         0x0      0
eip         0x804837a        0x804837a <main+6> 
eflags      0x286      [ PF SF IF ] 
cs          0x73        115 
ss          0x7b        123 
ds          0x7b        123 
es          0x7b        123 
fs          0x0         0 
gs          0x33        51 

(gdb) \\\quit\\\

After starting gdb on a.out, we set a breakpoint on main() function so that execution will stop right before our code is executed
We tell GDB to run the program and it stops at the breakpoint
We then tell GDB to display all the processor registers and their current states

The first 4 registers (EAX, ECX, EDX, EBX) are known as general purpose registers
They are called the Accumulator, Counter, Data and Base registers, respectively
They mainly act as temporary variables for the CPU when it is executing machine instructions

The second 4 registers (ESP, EBP, ESI, EDI) are also general purpose registers, but are sometimes known as pointers and indexes
They are Stack Pointer, Base Pointer, Source Index and Destination Index, respectively
The first 2 registers are pointers beacuse they store 32-bit addresses, which essentially point to that location in memory
    They are important to program execution and memory management
The last 2 registers are also technically pointers, commonly used to point to source and destination when data needs to be read from or written to
    There are load and store instructions that use these registers, but they are mostly used as general-purpose pointers

The EIP register is the Instruction Pointer register, which points to the current instruction the processor is reading
The processor reads each instruction using the EIP register
Currently it points to a memory address at 0x804838a

The remaining EFLAGS register consist of several bit flags used for comparisons and memory segmentations
Actual memory is split into several segements, which are tracked by these registers