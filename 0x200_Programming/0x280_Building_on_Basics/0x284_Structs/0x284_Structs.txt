Sometimes there are multiple variables that should be grouped together and treated like one
In C, structs are variables that can contain many other variables
Structs are often used by various system functions and libraries, so understanding how to use structs is a prerequisite to using these functions
When dealing with many time functions, these functions use a time struct called tm, which is defined in /usr/include/time.h

The struct's definition is as follows:
__________________________________________________________________________________
struct tm {
    int           tm_sec;           /* seconds */
    int           tm_min;           /* minutes */
    int           tm_hour;          /* hours */
    int           tm_mday;          /* day of the month */
    int           tm_mon;           /* month */
    int           tm_year;          /* year */
    int           tm_wday;          /* day of the week */
    int           tm_ydat;          /* day of the year */
    int           tm_isdst;         /* daylight saving time */
}
__________________________________________________________________________________

After the struct is defined, struct tm becomes a usable variable type, which can be used to declare variables and pointers with the data type of the tm struct
When time.h is included, the tm struct is defined, which is latter used to declare the current_time and time_ptr variables

time_example.c
__________________________________________________________________________________
#include <stdio.h>
#include <time.h>

int main() {
    long int seconds_since_epoch;
    struct tm current_time, *time_ptr;
    int hour, minute, second, day, month, year;

    seconds_since_epoch = time(0); // Pass time a null pointer as argument
    printf("time() - seconds since epoch: %ld\n", seconds_since_epoch);

    time_ptr = &current_time; // Set time_ptr to the address of
                              // the current_time struct
    localtime_r(&seconds_since_epoch, time_ptr);

    // Three different ways to access struct elements:
    hour = current_time.tm_hour; // Direct access
    minute = time_ptr->tm_min; // Access via pointer
    second = *((int *) time_ptr); // Hacky pointer access

    printf("Current time is: %02d:%02d:%02d\n", hour, minute, second);
}
__________________________________________________________________________________

The time() function will return the number of seconds since January 1, 1970
Time on UNIX systems is kept relative to this rather arbitrary point in time, which is also known as the epoch
The localtime_r() function expects two pointers as arguments: one to the number of seconds since epoch and the other to a tm struct
The pointer time_ptr has already been set to the address of current_time, an empty tm struct
The address-of operator is used to provide a pointer to seconds_since_epoch for the other argument to localtime_r9(), which fills the elements of the tm struct
The elements of structs can be accessed in 3 ways: the first 2 are the proper ways to access struct elements, and the third is a hacked solution 
If a struct variable is used, its elements can be accessed by adding the element's names to the end of the variable name with a period
Therefore, current_time.tm_hour will access just the tm_hour element of the tm struct called current_time
Pointers to structs are often used, since it is much more efficient to pass a 4-byte pointer than an entire data structure
Structs pointers are so common that C has a built-in method to access struct elements from a struct pointer without needing to dereference the pointer
When using a struct pointer like time_ptr, struct elements can be similarly accessed by the struct element's name, but using a series of characters that look like an arrow pointing right
Therefore, time_ptr->tm_min will access the tm_min element of the tm struct that is pointed to by time_ptr
The seconds could be accessed via either of these proper methods, using the tm_sec element or the tm struct, but a third method is used

__________________________________________________________________________________
reader@hacking:~/booksrc $ gcc time_example.c
reader@hacking:~/booksrc $ ./a.out
time() - seconds since epoch: 1189311588
Current time is: 04:19:48
reader@hacking:~/booksrc $ ./a.out
time() - seconds since epoch: 1189311600
Current time is: 04:20:00
__________________________________________________________________________________

The program works as expected
How seconds are being accessed in tm struct
In the end, it is all just memory
In the beginning of the tm struct, tm_sec is defined as shown above in tm definition
So, the seconds integer value is  also found at the beginning
In the line second=*((int *) time_ptr), the variable time_ptr is typecast from tm struct pointer to an integer pointer
Then the typecast pointer is dereferenced, returning the data at the pointer's address
Since the address to the tm struct also points to the first element of this struct, this will retrieve the integer value for tm_sec in the struct

The following program also dumps the bytes of the current_time
This shows that the elements of tm struct are right next to each other in memory
The elements further down in the struct can also be directly accessed with pointers by simply adding to the address of the pointer

time_example2.c
__________________________________________________________________________________
#include <stdio.h>
#include <time.h>

void dump_time_struct_bytes(struct tm *time_ptr, int size){
	int i;
	unsigned char *raw_ptr;
	
	printf("bytes of struct located at 0x%08x\n", time_ptr);
	raw_ptr = (unsigned char *) time_ptr;
	for(i = 0; i < size; i++)
	{
		printf("%02x ", raw_ptr[i]);
		if(i%16 == 15) // Print a newline every 16 bytes
			printf("\n");
	}
	printf("\n");
}

int main() {
	long int seconds_since_epoch;
	struct tm current_time, *time_ptr;
	int hour, minute, second, i, *int_ptr;

	seconds_since_epoch = time(0); // Pass time a null pointer as argument
	printf("time() - seconds since epoch: %ld\n", seconds_since_epoch);

	time_ptr = &current_time; //Set time_ptr to the address of 
							  //the current_time struct
	localtime_r(&seconds_since_epoch, time_ptr);

	//Three different ways to access struct elements
	hour = current_time.tm_hour; // Direct access
	minute = time_ptr->tm_min; // Access via pointer
	second = *((int *) time_ptr); // Hacky pointer access

	printf("Current time is: %02d:%02d:%02d\n", hour, minute, second);

	dump_time_struct_bytes(time_ptr, sizeof(struct tm)); // sizeof(variable) gives the memory in bytes of the datatype

	minute = hour = 0; // Clear out minute and hour
	int_ptr = (int *) time_ptr;

	for(i = 0; i < 3; i++) {
		printf("int_ptr @ 0x%08x : %d\n", int_ptr, *int_ptr);
		int_ptr++; // Adding 1 to int_ptr adds 4 to the address,
				   // since an int is 4 bytes
	}
}
__________________________________________________________________________________

__________________________________________________________________________________
reader@hacking:~/booksrc $ gcc -g time_example2.c
reader@hacking:~/booksrc $ ./a.out
time() - seconds since epoch: 1586764358
Current time is: 13:37:38
bytes of struct located at 0x9fd6d910
26 00 00 00 25 00 00 00 0d 00 00 00 0d 00 00 00 
03 00 00 00 78 00 00 00 01 00 00 00 67 00 00 00 
00 00 00 00 d5 55 00 00 dc 50 00 00 00 00 00 00 
10 f9 71 43 d5 55 00 00 
int_ptr @ 0x9fd6d910 : 38
int_ptr @ 0x9fd6d914 : 37
int_ptr @ 0x9fd6d918 : 13
__________________________________________________________________________________

While struct memory can be accessed this way, assumptions are made about the type of variables in the struct and the lack of any padding between variables
Since the data types of a struct's elements are also stored in the struct, using proper methods to access struct elements is much easier