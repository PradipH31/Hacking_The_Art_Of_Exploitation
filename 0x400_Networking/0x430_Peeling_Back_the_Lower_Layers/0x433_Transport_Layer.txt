The transport layer can be thought of as the first line of office receptionists, picking up the mail from the network layer
If a customer wants to return a defective piece of merchandise, they send a message requesting a Return Material Authorization (RMA) number
Then the receptionist would follow the return protocol by asking for a receipt and eventually issuing a RMA number so the customer can mail the product in
The post office is only concerned with sending these messages (and packets) back and forth, not with what's in them

The 2 major protocols at this layer are the Transmission Control Protocol (TCP) and User Datagram Protocol (UDP)
TCP is the most commonly used protocol for services on the Internet: telnet, HTTP (web traffic), SMTP (email traffic), and FTP (file transfers) all use TCP
One of the reasons for TCP's popularity is that it provides a transparent, yet reliable and bidirectional connection between 2 IP addresses
Stream sockets use TCP/IP connections
A bidirectional connection with TCP is similar to using a telephone- after dialing a number, a connection is made through which both parties can communicate
Reliability simply means that TCP will ensure that all the data will reach its destination in the proper order
If the packets of a connection get jumbled up and arrive out of order, TCP will make sure they're put back in order before handling the data up to the next layer
If some packets in the middle of a connection are lost, the destination will hold on to the packets it has while the source retransmits the missing packets

All of this functionality is made possible by a set of flags, called TCP flags, and by tracking values called sequence numbers
The TCP flags are:
__________________________________________________________________________________
TCP flag  |  Meaning          |  Purpose
__________|___________________|___________________________________________________
URG       |  Urgent           |  Identifies important data
ACK       |  Acknowledgement  |  Acknowledges a packet; it is turned on 
          |                   |  for the majority of the connection
PSH       |  Push             |  Tells the receiver to push the data through 
          |                   |  instead of buffering it
RST       |  Reset            |  Resets a connection
SYN       |  Synchronize      |  Synchronizes sequence numbers of the beginning 
          |                   |  of a connection
FIN       |  Finish           |  Gracefullt closes a connection when both sides 
          |                   |  say goodbye

These flags are stored in the TCP header along with the source and destination ports
The TCP header is specified in RFC 793

FROM RFC 793
__________________________________________________________________________________
[Page 14]

September 1981
                                           Transmission Control Protocol

                      3.  FUNCTIONAL SPECIFICATION

3.1.  Header Format

  TCP segments are sent as internet datagrams.  The Internet Protocol
  header carries several information fields, including the source and
  destination host addresses [2].  A TCP header follows the internet
  header, supplying information specific to the TCP protocol.  This
  division allows for the existence of host level protocols other than
  TCP.

  TCP Header Format


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Sequence Number                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Acknowledgment Number                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Data |           |U|A|P|R|S|F|                               |
   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |
   |       |           |G|K|H|T|N|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Checksum            |         Urgent Pointer        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             data                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            TCP Header Format

          Note that one tick mark represents one bit position.

                               Figure 3.
__________________________________________________________________________________

The sequence number and acknowledgement number are used to maintain state
The SYN and ACK flags are used together to open connections in a 3-step handshaking process
When a client wants to open a connection with a server, a packet with the SYN flag on, but the ACK flag off, is sent to the server
The server then responds with a packet that has both the SYN and ACK flags turned on
To complete the connection, the client sends back a packet with the SYN flag off but the ACK flag on
After that, every packet in the connection will have the ACK flag turned on and the SYN flag turned off
Only the first 2 packets are used to synchronize sequence numbers

____________                              ____________
|          |    ______________________    |          |
|          |    |  SYN packet        |    |          |
|          |    |  SYN on  ACK off   |   \|          |
|          |----|  seq # = 324808530 |----|          |
|          |    |  ack # = 0         |   /|          |
|          |    |____________________|    |          |
|          |                              |          |
|          |                              |          |
|          |    ______________________    |          |
|          |    |  SYN/ACK packet    |    |          |
|          |/   |  SYN on  ACK on    |    |          |
|  Client  |----|  seq # = 288666267 |----|  Server  |
|          |\   |  ack # = 324808531 |    |          |
|          |    |____________________|    |          |
|          |                              |          |
|          |                              |          |
|          |    ______________________    |          |
|          |    |  ACK packet        |    |          |
|          |    |  SYN off  ACK on   |   \|          | 
|          |----|  seq # = 324808531 |----|          | 
|          |    |  ack # = 324808531 |   /|          | 
|          |    |____________________|    |          | 
|__________|                              |__________|

Sequence numbers allow TCP to put unordered packets back into order, to determine whether packets are missing, and to prevent mixing up packets from other connections

When a connection is initiated, each side generates an initial sequence number
This number is communicated to the other side in the first 2 SYN packets of the connection handshake
Then, with each packet that is sent, the sequence number is increased by the number of bytes foudn in the data portion of the packet
This sequence number is included in the TCP packet header
In addition, each TCP header has an acknowledgement number, which is simply the other side's sequence number plus 1

TCP is great for applications where reliability and bidirectional communication are needed
However, the cost of this functionality is paid in communication overhead

UDP has much less overhead and built-in functionality than TCP
This lack of functionality makes it behave much like the IP protocol: connectionless and unreliable
Without built-in functionality to create connections and maintain reliability, UDP is an alternative that expects the application to deal with these issues
Sometimes connections aren't needed, and the light-weight UDP is a much better protocol for these situations
The UDP header, defined in RFC 768, is relatively tiny
It only contains 4 16-bit values in this order: source port, destination port, length and checksum