Many of the socket functions reference a sockaddr structure to pass address information that defines a host
This structure is also defined in bits/socket.h, as shown below:

From /usr/include/bits/socket.h
__________________________________________________________________________________
/* Get the definition of the macro to define the common sockaddr members. */
#include <bits/sockaddr.h>

/* Structure describing a generic socket address. */
struct sockaddr
  {
    __SOCKADDR_COMMON (sa_);  /* Common data: address family and length. */
    char sa_data[14];   /* Address data. */
  };
__________________________________________________________________________________

The macro for SOCADDR_COMMON is defined in the included bits/sockaddr.h file, which basically translates to an unsigned short int
This value defines the address family of the address, and the rest of the structure is saved for address data
Since sockets can communicate using a variety of protocol families, each with their own way of defining endpoint addresses, the definition of an address must also be variable, depending on the address family
The possible address families are also defined in bits/socket.h; they usually translate directly to the corresponding protocol families

From /usr/include/bits/socket.h
__________________________________________________________________________________
/* Address families. */
#define AF_UNSPEC PF_UNSPEC
#define AF_LOCAL  PF_LOCAL
#define AF_UNIX   PF_UNIX
#define AF_FILE   PF_FILE
#define AF_INET   PF_INET
#define AF_AX25   PF_AX25
#define AF_IPX    PF_IPX
#define AF_APPLETALK   PF_APPLETALK
#define AF_NETROM PF_NETROM
#define AF_BRIDGE PF_BRIDGE
#define AF_ATMPVC PF_ATMPVC
#define AF_X25    PF_X25
#define AF_INET6  PF_INET6
...
__________________________________________________________________________________
Since an address can contain different types of information, depending on the address family, there are several address structures that contain, in the address data section, common elements from the sockaddr structure as well as informationn specififc to the address family
These structures are also the same size, so they can be typecast to and from each other
This means a socket() function will simply accept a pointer to a sockaddr strcuture, which can in fact point to an address structure for IPv4, IPv6, or X.25
This allows the socket functions to operate on a variety of protocols

We are going to deal with Internet Protocol version 4, which is the protocol family PF_INET, using the address family AF_INET
The parallel socket address structure for AF_INET is defined in the netinet/in.h file

From /usr/include/netinet/in.h
__________________________________________________________________________________
/* Structure describing an Internet socket address. */
   struct sockaddr_in
   {
      __SOCKADDR_COMMON (sin_);
      in_port_t sin_port;       /* Port number. */
      struct in_addr sin_addr; /* Internet address. */
      
      /* Pad to size of 'struct sockaddr'. */
      unsigned char sin_zero[sizeof (struct sockaddr) -
          __SOCKADDR_COMMON_SIZE -
          sizeof (in_port_t) -
          sizeof (struct in_addr)];
   };
__________________________________________________________________________________

The SOCKADDR_COMMON part at the top of the structure is simply the unsigned short int mentioned above, which is used to define the address family
Since a socket endpoint address consists of an Internet address and a port number, these are the next 2 values in the structure
The port number is a 16-bit short, while the in_addr structure used for the Internet address contains a 32-bit number
The rest of the strcuture is just 8 bytes of padding to fill out the rest of the sockaddr structure
This space isn't used for anything, but must be saved so the structures can be interchangeably typecast
In the end, the socket address structures end up looking like this:

sockaddr structure (Generic strucuture)
____________________________________________________________________________________
|   Family  |                           sa_data (14 bytes)                          |
|_____|_____|____|_____|_____|____|_____|_____|______|______|____|_____|______|_____|

sockaddr_in structure (Used for IP version 4)
_____________________________________________________________________________________
|   Family  |  Port #  |     IP address     |         Extra padding (8 bytes)       |
|_____|_____|_____|____|____|_____|_____|___|___|____|_____|______|___|___|____|____|

                 Both structures are the same size