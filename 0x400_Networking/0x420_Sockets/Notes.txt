Create a new socket:
    socket(int domain, int type, int protocol)
        Domain 
            Refers to the protocol family of the socket
            Various protocols can be used to communicate
            IPv4 uses protocol family PF_INET
        Type
            Most common are stream and datagram sockets
        Protocol
            Used to select a protocol from the domain(protocol family)
            Almost always 0
            A protocol family can have multiple protocols(however, most have only 1)
            So, we use 0 for the first and the only protocol in the family


Socket functions use a sockaddr struct(socket address)

    struct sockaddr
        SOCKADDR_COMMON     contains address family
        char sa_datap[14]   address data

    The struct contains a macro for SOCKADDR_COMMON, which is basically an unsigned short int
    The macro contains the address family of the address
    Address family
        IPv4 uses address family AF_INET
    The rest of the struct is saved for address data
        An address contains different information, depending on address family
        Various address structures can contain common elements from sockaddr structure and unique information as well
        These various structures are same size, so they can be typecast to and from each other

    Socket address for AF_INET
    struct sockaddr_in
        SOCKADDR_COMMON         contains the address family
        in_port_t sin_port      contains port number
        struct in_addr sin_addr conatins internet address
        unsigned char sin_zero  contains padding


Hosent structure is a struct filled with information about a named address(like google.com)
struct hostent{
    char *h_name        Official name of host
    char **h_aliases    Alias list
    int h_addrtype      Host address type
    int h_length        length of address
    char **h_addr_list  list of addresses from name server
    constant h_addr     Address

To use the address,
    host_info = gethostbyname()
    address = (struct in_addr *) (host_info->h_addr)
    printf("%s", inet_ntoa(*address))
